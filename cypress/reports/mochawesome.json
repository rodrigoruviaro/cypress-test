{
  "stats": {
    "suites": 1,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2025-08-15T01:46:39.069Z",
    "end": "2025-08-15T01:46:41.910Z",
    "duration": 2841,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0f7adbd6-d93c-4008-965d-69c18e55e0a1",
      "title": "",
      "fullFile": "cypress\\e2e\\2-Teste_API\\Tarefa_1_e_2.cy.js",
      "file": "cypress\\e2e\\2-Teste_API\\Tarefa_1_e_2.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3a14ca25-f8ac-490f-81ad-bc3b9a68987e",
          "title": "Testes da API - Cadastro",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET - Validar se a API está retornando status 200",
              "fullTitle": "Testes da API - Cadastro GET - Validar se a API está retornando status 200",
              "timedOut": null,
              "duration": 863,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.api({\n  method: 'GET',\n  url: _endpoints.CADASTRO\n}).then(response => {\n  expect(response.headers).to.have.property('content-type').and.include('application/json');\n  expect(response.status).to.eq(200);\n  expect(response.body).to.be.an('array');\n});",
              "err": {},
              "uuid": "550af657-c105-4c95-9804-b5709b04b454",
              "parentUUID": "3a14ca25-f8ac-490f-81ad-bc3b9a68987e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Validar URL incorreta, deve retornar status 404",
              "fullTitle": "Testes da API - Cadastro GET - Validar URL incorreta, deve retornar status 404",
              "timedOut": null,
              "duration": 192,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.api({\n  method: 'GET',\n  url: `${_endpoints.CADASTRO}s`,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(404);\n  expect(response.body).to.contain(\"Not found\");\n});",
              "err": {},
              "uuid": "d17965cb-5423-44b6-a6e1-4de4862c72c3",
              "parentUUID": "3a14ca25-f8ac-490f-81ad-bc3b9a68987e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - Enviar requisição para URL incorreta deve retornar 400",
              "fullTitle": "Testes da API - Cadastro POST - Enviar requisição para URL incorreta deve retornar 400",
              "timedOut": null,
              "duration": 188,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.api({\n  method: 'POST',\n  url: `${_endpoints.CADASTRO}s`,\n  body: cadastro,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(400);\n  expect(response.body).to.contain('Invalid request');\n});",
              "err": {},
              "uuid": "9eb0b7dd-5640-46f3-b517-d5f4316b55e7",
              "parentUUID": "3a14ca25-f8ac-490f-81ad-bc3b9a68987e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - Criar novo cadastro",
              "fullTitle": "Testes da API - Cadastro POST - Criar novo cadastro",
              "timedOut": null,
              "duration": 206,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.api({\n  method: 'POST',\n  url: _endpoints.CADASTRO,\n  body: cadastro\n}).then(response => {\n  expect(response.headers).to.have.property('content-type').and.include('application/json');\n  expect(response.status).to.eq(201);\n  expect(response.body).to.have.property('createdAt');\n  expect(response.body).to.have.property('name', cadastro.name);\n  expect(response.body).to.have.property('avatar');\n  expect(response.body).to.have.property('id');\n  expect(response.body).to.have.property('email', cadastro.email);\n  Id = response.body.id;\n});",
              "err": {},
              "uuid": "3e69dba1-27d6-4e38-82e6-ddcb7c524d13",
              "parentUUID": "3a14ca25-f8ac-490f-81ad-bc3b9a68987e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Buscar cadastro efetuado anteriormente",
              "fullTitle": "Testes da API - Cadastro GET - Buscar cadastro efetuado anteriormente",
              "timedOut": null,
              "duration": 190,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.api({\n  method: 'GET',\n  url: `${_endpoints.CADASTRO}/${Id}`\n}).then(response => {\n  expect(response.headers).to.have.property('content-type').and.include('application/json');\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('id', Id);\n  expect(response.body).to.have.property('name', cadastro.name);\n  expect(response.body).to.have.property('email', cadastro.email);\n});",
              "err": {},
              "uuid": "e435c533-1664-412e-8db6-20b3ced17ef3",
              "parentUUID": "3a14ca25-f8ac-490f-81ad-bc3b9a68987e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Buscar registro inexistente, deve retornar status 404",
              "fullTitle": "Testes da API - Cadastro GET - Buscar registro inexistente, deve retornar status 404",
              "timedOut": null,
              "duration": 184,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.api({\n  method: 'GET',\n  url: `${_endpoints.CADASTRO}/99999a`,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(404);\n  expect(response.body).to.contain(\"Not found\");\n});",
              "err": {},
              "uuid": "3b9f5f1f-7183-449b-9d0d-9530c69f859b",
              "parentUUID": "3a14ca25-f8ac-490f-81ad-bc3b9a68987e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT - Atualizar dados do cadastro",
              "fullTitle": "Testes da API - Cadastro PUT - Atualizar dados do cadastro",
              "timedOut": null,
              "duration": 190,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.api({\n  method: 'PUT',\n  url: `${_endpoints.CADASTRO}/${Id}`,\n  body: cadastroAtualizado\n}).then(response => {\n  expect(response.headers).to.have.property('content-type').and.include('application/json');\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('createdAt');\n  expect(response.body).to.have.property('name', cadastroAtualizado.name);\n  expect(response.body).to.have.property('avatar');\n  expect(response.body).to.have.property('id', Id);\n  expect(response.body).to.have.property('email', cadastroAtualizado.email);\n});",
              "err": {},
              "uuid": "8f6e7557-dbc4-4a03-9d6d-66dce409107c",
              "parentUUID": "3a14ca25-f8ac-490f-81ad-bc3b9a68987e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Validar se os dados foram atualizados",
              "fullTitle": "Testes da API - Cadastro GET - Validar se os dados foram atualizados",
              "timedOut": null,
              "duration": 186,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.api({\n  method: 'GET',\n  url: `${_endpoints.CADASTRO}/${Id}`\n}).then(response => {\n  expect(response.headers).to.have.property('content-type').and.include('application/json');\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('id', Id);\n  expect(response.body).to.have.property('name', cadastroAtualizado.name);\n  expect(response.body).to.have.property('email', cadastroAtualizado.email);\n});",
              "err": {},
              "uuid": "5b4a6087-58e2-4455-b004-f379ca219ff2",
              "parentUUID": "3a14ca25-f8ac-490f-81ad-bc3b9a68987e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE - Excluir cadastro",
              "fullTitle": "Testes da API - Cadastro DELETE - Excluir cadastro",
              "timedOut": null,
              "duration": 194,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.api({\n  method: 'DELETE',\n  url: `${_endpoints.CADASTRO}/${Id}`\n}).then(response => {\n  expect(response.headers).to.have.property('content-type').and.include('application/json');\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('createdAt');\n  expect(response.body).to.have.property('name', cadastroAtualizado.name);\n  expect(response.body).to.have.property('avatar');\n  expect(response.body).to.have.property('id', Id);\n  expect(response.body).to.have.property('email', cadastroAtualizado.email);\n});",
              "err": {},
              "uuid": "fdc6e1df-5869-43ae-9a93-5958e3394c1b",
              "parentUUID": "3a14ca25-f8ac-490f-81ad-bc3b9a68987e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Validar se o registro foi excluído, deve retornar status 404",
              "fullTitle": "Testes da API - Cadastro GET - Validar se o registro foi excluído, deve retornar status 404",
              "timedOut": null,
              "duration": 176,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.api({\n  method: 'GET',\n  url: `${_endpoints.CADASTRO}/${Id}`,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(404);\n  expect(response.body).to.contain(\"Not found\");\n});",
              "err": {},
              "uuid": "f634ea1e-3d1f-451f-b96c-10fa5ec8538a",
              "parentUUID": "3a14ca25-f8ac-490f-81ad-bc3b9a68987e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "550af657-c105-4c95-9804-b5709b04b454",
            "d17965cb-5423-44b6-a6e1-4de4862c72c3",
            "9eb0b7dd-5640-46f3-b517-d5f4316b55e7",
            "3e69dba1-27d6-4e38-82e6-ddcb7c524d13",
            "e435c533-1664-412e-8db6-20b3ced17ef3",
            "3b9f5f1f-7183-449b-9d0d-9530c69f859b",
            "8f6e7557-dbc4-4a03-9d6d-66dce409107c",
            "5b4a6087-58e2-4455-b004-f379ca219ff2",
            "fdc6e1df-5869-43ae-9a93-5958e3394c1b",
            "f634ea1e-3d1f-451f-b96c-10fa5ec8538a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2569,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}