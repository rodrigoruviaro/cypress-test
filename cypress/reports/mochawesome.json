{
  "stats": {
    "suites": 1,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2025-08-15T01:17:09.213Z",
    "end": "2025-08-15T01:17:11.848Z",
    "duration": 2635,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "800704d2-efdf-4ffe-8c82-159defb5fd3e",
      "title": "",
      "fullFile": "cypress/e2e/2-Teste_API/Tarefa_1_e_2.cy.js",
      "file": "cypress/e2e/2-Teste_API/Tarefa_1_e_2.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f05aca0d-ef24-4131-831f-4dd36e676940",
          "title": "Testes da API - Cadastro",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET - Validar se a API está retornando status 200",
              "fullTitle": "Testes da API - Cadastro GET - Validar se a API está retornando status 200",
              "timedOut": null,
              "duration": 1027,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.api({\n  method: 'GET',\n  url: _endpoints.CADASTRO\n}).then(response => {\n  expect(response.headers).to.have.property('content-type').and.include('application/json');\n  expect(response.status).to.eq(200);\n  expect(response.body).to.be.an('array');\n});",
              "err": {},
              "uuid": "8a0e53af-5e28-4f2a-9869-44e40e687f66",
              "parentUUID": "f05aca0d-ef24-4131-831f-4dd36e676940",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Validar URL incorreta, deve retornar status 404",
              "fullTitle": "Testes da API - Cadastro GET - Validar URL incorreta, deve retornar status 404",
              "timedOut": null,
              "duration": 160,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.api({\n  method: 'GET',\n  url: `${_endpoints.CADASTRO}s`,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(404);\n  expect(response.body).to.contain(\"Not found\");\n});",
              "err": {},
              "uuid": "59832bef-2f01-46e0-a862-8073b4898295",
              "parentUUID": "f05aca0d-ef24-4131-831f-4dd36e676940",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - Enviar requisição para URL incorreta deve retornar 400",
              "fullTitle": "Testes da API - Cadastro POST - Enviar requisição para URL incorreta deve retornar 400",
              "timedOut": null,
              "duration": 160,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.api({\n  method: 'POST',\n  url: `${_endpoints.CADASTRO}s`,\n  body: cadastro,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(400);\n  expect(response.body).to.contain('Invalid request');\n});",
              "err": {},
              "uuid": "7230bc2f-2494-43a0-bd80-52b416744682",
              "parentUUID": "f05aca0d-ef24-4131-831f-4dd36e676940",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - Criar novo cadastro",
              "fullTitle": "Testes da API - Cadastro POST - Criar novo cadastro",
              "timedOut": null,
              "duration": 175,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.api({\n  method: 'POST',\n  url: _endpoints.CADASTRO,\n  body: cadastro\n}).then(response => {\n  expect(response.headers).to.have.property('content-type').and.include('application/json');\n  expect(response.status).to.eq(201);\n  expect(response.body).to.have.property('createdAt');\n  expect(response.body).to.have.property('name', cadastro.name);\n  expect(response.body).to.have.property('avatar');\n  expect(response.body).to.have.property('id');\n  expect(response.body).to.have.property('email', cadastro.email);\n  Id = response.body.id;\n});",
              "err": {},
              "uuid": "412318b7-dbc5-4bde-9ad8-579160a706ac",
              "parentUUID": "f05aca0d-ef24-4131-831f-4dd36e676940",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Buscar cadastro efetuado anteriormente",
              "fullTitle": "Testes da API - Cadastro GET - Buscar cadastro efetuado anteriormente",
              "timedOut": null,
              "duration": 158,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.api({\n  method: 'GET',\n  url: `${_endpoints.CADASTRO}/${Id}`\n}).then(response => {\n  expect(response.headers).to.have.property('content-type').and.include('application/json');\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('id', Id);\n  expect(response.body).to.have.property('name', cadastro.name);\n  expect(response.body).to.have.property('email', cadastro.email);\n});",
              "err": {},
              "uuid": "f05fc373-4ea3-4096-be41-01ea4d2eb59d",
              "parentUUID": "f05aca0d-ef24-4131-831f-4dd36e676940",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Buscar registro inexistente, deve retornar status 404",
              "fullTitle": "Testes da API - Cadastro GET - Buscar registro inexistente, deve retornar status 404",
              "timedOut": null,
              "duration": 156,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.api({\n  method: 'GET',\n  url: `${_endpoints.CADASTRO}/99999a`,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(404);\n  expect(response.body).to.contain(\"Not found\");\n});",
              "err": {},
              "uuid": "0992f7f4-1532-4236-a401-b8e2bd7855e7",
              "parentUUID": "f05aca0d-ef24-4131-831f-4dd36e676940",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT - Atualizar dados do cadastro",
              "fullTitle": "Testes da API - Cadastro PUT - Atualizar dados do cadastro",
              "timedOut": null,
              "duration": 166,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.api({\n  method: 'PUT',\n  url: `${_endpoints.CADASTRO}/${Id}`,\n  body: cadastroAtualizado\n}).then(response => {\n  expect(response.headers).to.have.property('content-type').and.include('application/json');\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('createdAt');\n  expect(response.body).to.have.property('name', cadastroAtualizado.name);\n  expect(response.body).to.have.property('avatar');\n  expect(response.body).to.have.property('id', Id);\n  expect(response.body).to.have.property('email', cadastroAtualizado.email);\n});",
              "err": {},
              "uuid": "09702bb4-f751-4bd5-9eaf-c54b458239de",
              "parentUUID": "f05aca0d-ef24-4131-831f-4dd36e676940",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Validar se os dados foram atualizados",
              "fullTitle": "Testes da API - Cadastro GET - Validar se os dados foram atualizados",
              "timedOut": null,
              "duration": 180,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.api({\n  method: 'GET',\n  url: `${_endpoints.CADASTRO}/${Id}`\n}).then(response => {\n  expect(response.headers).to.have.property('content-type').and.include('application/json');\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('id', Id);\n  expect(response.body).to.have.property('name', cadastroAtualizado.name);\n  expect(response.body).to.have.property('email', cadastroAtualizado.email);\n});",
              "err": {},
              "uuid": "5210ff92-e3a0-4ac8-b17e-54b05175a613",
              "parentUUID": "f05aca0d-ef24-4131-831f-4dd36e676940",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE - Excluir cadastro",
              "fullTitle": "Testes da API - Cadastro DELETE - Excluir cadastro",
              "timedOut": null,
              "duration": 172,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.api({\n  method: 'DELETE',\n  url: `${_endpoints.CADASTRO}/${Id}`\n}).then(response => {\n  expect(response.headers).to.have.property('content-type').and.include('application/json');\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('createdAt');\n  expect(response.body).to.have.property('name', cadastroAtualizado.name);\n  expect(response.body).to.have.property('avatar');\n  expect(response.body).to.have.property('id', Id);\n  expect(response.body).to.have.property('email', cadastroAtualizado.email);\n});",
              "err": {},
              "uuid": "8affe5ae-b9d7-4149-aa76-005bb8dac344",
              "parentUUID": "f05aca0d-ef24-4131-831f-4dd36e676940",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Validar se o registro foi excluído, deve retornar status 404",
              "fullTitle": "Testes da API - Cadastro GET - Validar se o registro foi excluído, deve retornar status 404",
              "timedOut": null,
              "duration": 163,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.api({\n  method: 'GET',\n  url: `${_endpoints.CADASTRO}/${Id}`,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(404);\n  expect(response.body).to.contain(\"Not found\");\n});",
              "err": {},
              "uuid": "d1e1d900-20f1-4632-8bfe-c165a485146a",
              "parentUUID": "f05aca0d-ef24-4131-831f-4dd36e676940",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8a0e53af-5e28-4f2a-9869-44e40e687f66",
            "59832bef-2f01-46e0-a862-8073b4898295",
            "7230bc2f-2494-43a0-bd80-52b416744682",
            "412318b7-dbc5-4bde-9ad8-579160a706ac",
            "f05fc373-4ea3-4096-be41-01ea4d2eb59d",
            "0992f7f4-1532-4236-a401-b8e2bd7855e7",
            "09702bb4-f751-4bd5-9eaf-c54b458239de",
            "5210ff92-e3a0-4ac8-b17e-54b05175a613",
            "8affe5ae-b9d7-4149-aa76-005bb8dac344",
            "d1e1d900-20f1-4632-8bfe-c165a485146a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2517,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}