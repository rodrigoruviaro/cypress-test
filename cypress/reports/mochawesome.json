{
  "stats": {
    "suites": 1,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2025-08-01T01:53:05.496Z",
    "end": "2025-08-01T01:53:17.156Z",
    "duration": 11660,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9d4ad352-4f87-41b3-a54a-5d9cd1c8fde8",
      "title": "",
      "fullFile": "cypress/e2e/2-Teste_API/Tarefa_1_e_2.cy.js",
      "file": "cypress/e2e/2-Teste_API/Tarefa_1_e_2.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "45c1f44f-706e-4621-b2f8-fec25508fb45",
          "title": "Testes da API - MockAPI (Cadastro)",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET - Validar se a API está retornando status 200",
              "fullTitle": "Testes da API - MockAPI (Cadastro) GET - Validar se a API está retornando status 200",
              "timedOut": null,
              "duration": 6214,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = {\n  method: 'GET',\n  url: baseUrl,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\ncy.api(requestPayload).then(response => {\n  expect(response.headers).to.have.property('content-type').and.include('application/json');\n  expect(response.status).to.eq(200);\n  expect(response.body).to.be.an('array');\n});",
              "err": {},
              "uuid": "88334fc5-8db1-4b25-a54c-4babde575d97",
              "parentUUID": "45c1f44f-706e-4621-b2f8-fec25508fb45",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Validar URL incorreta, deve retornar status 404",
              "fullTitle": "Testes da API - MockAPI (Cadastro) GET - Validar URL incorreta, deve retornar status 404",
              "timedOut": null,
              "duration": 203,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = {\n  method: 'GET',\n  url: 'https://688b7a952a52cabb9f51e423.mockapi.io/api/v1/cadastros',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  failOnStatusCode: false\n};\ncy.api(requestPayload).then(response => {\n  expect(response.status).to.eq(404);\n  expect(response.body).to.contain(\"Not found\");\n});",
              "err": {},
              "uuid": "ebe80d0b-9287-42d0-9630-20112747b64d",
              "parentUUID": "45c1f44f-706e-4621-b2f8-fec25508fb45",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - Enviar Requisição para ULR incorreta deve retornar 400",
              "fullTitle": "Testes da API - MockAPI (Cadastro) POST - Enviar Requisição para ULR incorreta deve retornar 400",
              "timedOut": null,
              "duration": 716,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = {\n  method: 'POST',\n  url: 'https://688b7a952a52cabb9f51e423.mockapi.io/api/v1/cadastros',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: {\n    name: name,\n    email: email\n  },\n  failOnStatusCode: false\n};\ncy.api(requestPayload).then(response => {\n  expect(response.status).to.eq(400);\n  expect(response.body).to.contain('Invalid request');\n});",
              "err": {},
              "uuid": "5b21fdc3-0d66-4220-8d56-0d7ff026f61a",
              "parentUUID": "45c1f44f-706e-4621-b2f8-fec25508fb45",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - Criar novo cadastro",
              "fullTitle": "Testes da API - MockAPI (Cadastro) POST - Criar novo cadastro",
              "timedOut": null,
              "duration": 1467,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = {\n  method: 'POST',\n  url: baseUrl,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: {\n    name: name,\n    email: email\n  }\n};\ncy.api(requestPayload).then(response => {\n  expect(response.headers).to.have.property('content-type').and.include('application/json');\n  expect(response.status).to.eq(201);\n  expect(response.body).to.have.property('createdAt');\n  expect(response.body).to.have.property('name', name);\n  expect(response.body).to.have.property('avatar');\n  expect(response.body).to.have.property('id');\n  expect(response.body).to.have.property('email', email);\n  Id = response.body.id;\n});",
              "err": {},
              "uuid": "c1a86931-aaa5-4f57-9433-b2c75c8c89b2",
              "parentUUID": "45c1f44f-706e-4621-b2f8-fec25508fb45",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Buscar cadastro efetuado anteriormente",
              "fullTitle": "Testes da API - MockAPI (Cadastro) GET - Buscar cadastro efetuado anteriormente",
              "timedOut": null,
              "duration": 169,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = {\n  method: 'GET',\n  url: `${baseUrl}/${Id}`,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\ncy.api(requestPayload).then(response => {\n  expect(response.headers).to.have.property('content-type').and.include('application/json');\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('id', Id);\n  expect(response.body).to.have.property('name', name);\n  expect(response.body).to.have.property('email', email);\n});",
              "err": {},
              "uuid": "cd68e0bf-35f1-4753-80e1-981cec39e877",
              "parentUUID": "45c1f44f-706e-4621-b2f8-fec25508fb45",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Buscar Registro Inexistente, deve retornar status 404",
              "fullTitle": "Testes da API - MockAPI (Cadastro) GET - Buscar Registro Inexistente, deve retornar status 404",
              "timedOut": null,
              "duration": 1079,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = {\n  method: 'GET',\n  url: `${baseUrl}/99999a`,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  failOnStatusCode: false\n};\ncy.api(requestPayload).then(response => {\n  expect(response.status).to.eq(404);\n  expect(response.body).to.contain(\"Not found\");\n});",
              "err": {},
              "uuid": "e83c9ea8-6bd5-4087-a5fd-c4c344f6e8a1",
              "parentUUID": "45c1f44f-706e-4621-b2f8-fec25508fb45",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT - Atualizar os dados do cadastro",
              "fullTitle": "Testes da API - MockAPI (Cadastro) PUT - Atualizar os dados do cadastro",
              "timedOut": null,
              "duration": 184,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = {\n  method: 'PUT',\n  url: `${baseUrl}/${Id}`,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: {\n    name: nameAtualizado,\n    email: emailAtualizado\n  }\n};\ncy.api(requestPayload).then(response => {\n  expect(response.headers).to.have.property('content-type').and.include('application/json');\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('createdAt');\n  expect(response.body).to.have.property('name', nameAtualizado);\n  expect(response.body).to.have.property('avatar');\n  expect(response.body).to.have.property('id');\n  expect(response.body).to.have.property('email', emailAtualizado);\n});",
              "err": {},
              "uuid": "0c730821-df5c-446e-8ea3-bba514cdf63f",
              "parentUUID": "45c1f44f-706e-4621-b2f8-fec25508fb45",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Validar se os dados foram atualizados",
              "fullTitle": "Testes da API - MockAPI (Cadastro) GET - Validar se os dados foram atualizados",
              "timedOut": null,
              "duration": 1142,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = {\n  method: 'GET',\n  url: `${baseUrl}/${Id}`,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\ncy.api(requestPayload).then(response => {\n  expect(response.headers).to.have.property('content-type').and.include('application/json');\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('id', Id);\n  expect(response.body).to.have.property('name', nameAtualizado);\n  expect(response.body).to.have.property('email', emailAtualizado);\n});",
              "err": {},
              "uuid": "8c5e3782-9035-4bf6-b839-982a4f836b65",
              "parentUUID": "45c1f44f-706e-4621-b2f8-fec25508fb45",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE - Excluir cadastro",
              "fullTitle": "Testes da API - MockAPI (Cadastro) DELETE - Excluir cadastro",
              "timedOut": null,
              "duration": 184,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = {\n  method: 'DELETE',\n  url: `${baseUrl}/${Id}`,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\ncy.api(requestPayload).then(response => {\n  expect(response.headers).to.have.property('content-type').and.include('application/json');\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('createdAt');\n  expect(response.body).to.have.property('name', nameAtualizado);\n  expect(response.body).to.have.property('avatar');\n  expect(response.body).to.have.property('id');\n  expect(response.body).to.have.property('email', emailAtualizado);\n});",
              "err": {},
              "uuid": "43729bdd-be53-4787-9a34-066c0df1c4eb",
              "parentUUID": "45c1f44f-706e-4621-b2f8-fec25508fb45",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Validar se o registro foi excluido, deve retornar status 404",
              "fullTitle": "Testes da API - MockAPI (Cadastro) GET - Validar se o registro foi excluido, deve retornar status 404",
              "timedOut": null,
              "duration": 167,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = {\n  method: 'GET',\n  url: `${baseUrl}/${Id}`,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  failOnStatusCode: false\n};\ncy.api(requestPayload).then(response => {\n  expect(response.status).to.eq(404);\n  expect(response.body).to.contain(\"Not found\");\n});",
              "err": {},
              "uuid": "8ec2bbcd-ff4d-4c7c-b0d0-4eb7d38a8e16",
              "parentUUID": "45c1f44f-706e-4621-b2f8-fec25508fb45",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "88334fc5-8db1-4b25-a54c-4babde575d97",
            "ebe80d0b-9287-42d0-9630-20112747b64d",
            "5b21fdc3-0d66-4220-8d56-0d7ff026f61a",
            "c1a86931-aaa5-4f57-9433-b2c75c8c89b2",
            "cd68e0bf-35f1-4753-80e1-981cec39e877",
            "e83c9ea8-6bd5-4087-a5fd-c4c344f6e8a1",
            "0c730821-df5c-446e-8ea3-bba514cdf63f",
            "8c5e3782-9035-4bf6-b839-982a4f836b65",
            "43729bdd-be53-4787-9a34-066c0df1c4eb",
            "8ec2bbcd-ff4d-4c7c-b0d0-4eb7d38a8e16"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11525,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}